{"version":3,"sources":["vv/vvObj.js","vv/vvAll.js","App.js","serviceWorker.js","index.js"],"names":["vv","id","v","c","o","App","props","state","vvAll","vvObj","otvet","vvSort","sort","Math","random","index","finish","Otvet","bind","Next","this","setState","str","split","map","item","key","num","length","console","log","className","onClick","All","Obj","Text","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff3120ca.chunk.js","sourcesContent":["let vv = [\n  {\n    id: 1,\n    v: `Что такое super()? Что такое constructor()? `,\n    c: ``,\n    o: `super() это метод дочернего класса, для вызова конструктора родителя.\n        Или для доступа к методам родителя, если через точку. \\n\n        constructor() это метод для создания и инициализации объектов созданых через класс`,\n  },\n  {\n    id: 2,\n    v: `Что такое метод и что такое свойство объекта?`,\n    c: ``,\n    o: `Метод это действие/функция, а свойство это значение`,\n  },\n  {\n    id: 3,\n    v: `Что выдаст результата сравнения? `,\n    c: `var a = {name:'test'};\\n var b = {name:'test'};\\n a == b //???\\n a === b //???`,\n    o: `В обоих случаях \"false\", по тому что это 2 разных объекта. \\n Если бы во второй строке было var b = a..., то это была бы ссылка на один и тот же объект... и результат был бы \"true\"`,\n  },\n  {\n    id: 4,\n    v: `Что выведет консоль?`,\n    c: `let s = 'Hello'; \\n const Funk = (a)=>{\\n a = 'Bay'; \\n} \\n Funk(s); \\n console.log(s)`,\n    o: `Выведет 'Hello' по тому что строка не является ссылочным типом данных... как на пример объекты.`,\n  },\n  {\n    id: 5,\n    v: `Что выведет консоль?`,\n    c: `let s = {z: 'Hello'}; \\n const Funk = (a)=>{\\n a.z = 'Bay'; \\n}; \\n Funk(s); \\n console.log(s.z)`,\n    o: `Выведет 'Bay' по тому что объект это ссылочный тип данных, \\n let s = ... это ссылка на объект, она пердаёт в функцию ссылку на объект `,\n  },\n  {\n    id: 6,\n    v: `Зачем нужны функции call и apply? Чем они отличаются?`,\n    c: ``,\n    o: `Для привязки контекста. Другими словами для явного указания this. \\n Отличие в том что call принимает список аргументов, \\n а apply массив аргументов.`,\n  },\n  {\n    id: 7,\n    v: `Что выведет консоль?`,\n    c: `var i = 10; \\n function foo(i){ \\n console.log(i); \\n}; \\nfoo();`,\n    o: `Выведет andefined так как в параметры передано ничего.`,\n  },\n  {\n    id: 8,\n    v: `Что такое partial function?`,\n    c: ``,\n    o: `Это частичное применение функции. Это функция обёртка, которая вызывает функцию с фиксированными аргументами. \\n\n        Реализовать можно с помоью .bind() или написать самому.`,\n  },\n  {\n    id: 9,\n    v: `Что такое функции высшего порядка?`,\n    c: ``,\n    o: `Эт функции которые принимают или возврращают функции. Или всё вместе.`,\n  },\n  {\n    id: 10,\n    v: `Что такое Spread и Rest?`,\n    c: ``,\n    o: `Spread разворачивает массивы или объекты. С объектами он работает только в нутри {}. \\n\n        Rest собирает остаточные параметры функции в массив. А если он используется с объектом, то собирает остаточные поля в объект.`,\n  },\n  {\n    id: 11,\n    v: `Что такое Деструктуризация? `,\n    c: ``,\n    o: `С помощью неё можно разбить массив или объект на переменные по присвоению.`,\n  },\n  {\n    id: 12,\n    v: `Что такое Замыкание? [[Scope]] ?`,\n    c: ``,\n    o: `Это функция и лексическое окружение в котором она была создана. \\n\n        [[Scope]] это скрытое внутренее свойство функции, которое она получает при вызове, оно ссылается на лексическое окружение в котором она была создана`,\n  },\n  {\n    id: 13,\n    v: `Что такое this?`,\n    c: ``,\n    o: `Объект в контексте которого вызвана функция.`,\n  },\n  {\n    id: 14,\n    v: `Какими способами определяется и задается this?`,\n    c: ``,\n    o: `call, apply, bind.`,\n  },\n  {\n    id: 15,\n    v: `Какие способами можно объявлять функции? Рассказать, чем отличаются и как работают?`,\n    c: ``,\n    o: `1) ()=>{}; - Стрелочная функция. Не имеетт собственного this, arguments, нельзя вызывать с new. \\n \n        2) let Func = function(){} - Function Expression / Функциональное Выражение. Не может вызываться до присваивания. \\n \n        3) function Func(){}; - Function Declaration Можно вызывать функцию из любого места в коде. \\n\n        4) let Func = new Function(\"a\",\"b\", \"alert(a+b)\") - Функция создаётся из строки на лету. \n           Видит только глобальное окружение. Не имеет своего лексического окружения. Не может вызываться до присваивания.\n        5) Ещё есть самовызывающиеся функции. `,\n  },\n  {\n    id: 16,\n    v: `Call, Apply и Bind – что это, для чего используется и в чем разница?`,\n    c: ``,\n    o: `Это методы для привязки контекста. \\n\n        Bind привязывает контекст и принимает аргументы через запятую после контекста. \\n\n        Call привязывает контекст и принимает список аргументов. Вызывает функцию. \\n\n        Apply привязывает контекст и принимает массив аргументов. Вызывает функцию.`,\n  },\n  {\n    id: 17,\n    v: `Наведите и напишите пример кода когда нужно использовать bind?`,\n    c: ``,\n    o: `let user = { \\n\n            name: \"Lina\", \\n\n        } \\n\n        function userInfo(){ \\n\n              console.log(this.name) \\n\n            } \\n\n        userInfo.bind(user)() \\n`,\n  },\n  {\n    id: 18,\n    v: `Что такое [[Prototype]]?`,\n    c: ``,\n    o: `У объектов есть скрытое свойство [[Prototype]]. \n        Оно либо равно null, либо ссылается на другой объект. \n        Который является прототипом для этого объекта.`,\n  },\n  {\n    id: 19,\n    v: `Что такое чистая функция?`,\n    c: ``,\n    o: `Функцию можно назвать чистой если она независима, ведёт себя предсказуемо,\n        не меняет аргументы переданые ей и ни чего за пределами своей области. \\n\n        Не использует ни каких внешних сотояний/функций.\n        Возвращает всегда один и тот же результат, при одних и тех де аргументах. \\n\n        `,\n  },\n  {\n    id: 20,\n    v: `Чт такое промис?`,\n    c: ``,\n    o: `Промс это объект который обещает вернуть значение. \\n\n        Предназначеный для обработки успешно или не успешно выполненых асинхроных операций. \\n\n        Имеет своё внутенее состояние. \\n\n        Изначально (pending) - состояние ожидание. \\n\n        Если выполнено успешно, то состояние становится (fuifiled). И промис возвращает полученный результатат \\n\n        Или же состояние может стать (rejected) - когда выполнение отклонено. И промис вернёт причину отклонения. \\n \n        Каждый промис имеет метод .then в который передаётся, то что вернул промис. \\n\n        Если описана какая то обработка, .then возвращает новый промис выполненый с результатом первого промиса\n        Так же есть метод .catch для перехвата ошибок `,\n  },\n  {\n    id: 21,\n    v: `Как поставить в очередь функцию?`,\n    c: ``,\n    o: `С помощью функции async. И в нутри неё, с помощью await \n        регулируется порядок исполнения функций.`,\n  },\n  {\n    id: 22,\n    v: `Что такое каррирование?`,\n    c: ``,\n    o: `Это приём функционального програмирования, серия последовательных функций каждая из которых берёт один из нужных аргументов карированной функции. \\n\n        Каррированая функция будет принимать один аргумент и возвращать функцию, \n        которая также будет принимать ещё один аргумент и отдавать тоже функцию. \n        Это будет продолжаться до последнего аргумента и пока не вернется последняя функция, \n        в которой произойдут операции с предидущими аргументами вместе с последним.`,\n  },\n  {\n    id: 23,\n    v: `Что такое классы в JS?`,\n    c: ``,\n    o: `Класс это шаблон, для создания объектов, которые наследуют из класса начальные свойства и методы.`,\n  },\n  {\n    id: 24,\n    v: `Что такое prototype chain?`,\n    c: ``,\n    o: `Это цепочка прототипов. Прототипное наследование. Каждый объект имеет скрытое свойство  [[Prototype]],\n        ссылающееся на прототип этого объекта или равно null. Установить притотип для бъекта можно через .__proto__. \\n\n        При обращении к свойству/методу объекта, оно изначально ищется в самом объекте. \\n\n        Если его там нет, то оно ищется в прототипе. \\n\n        Если его и там нет, то ищется в прототипе этого прототипа... \\n\n        Это и есть цепочка прототипов.`,\n  },\n  {\n    id: 25,\n    v: `В чем разница между .__proto__ и .prototype?`,\n    c: ``,\n    o: `Каждая функция(кроме стрелочных) или класс по умолчанию имеет .prototype.\n        Оно ссылаестся на объект с единственным свойством .constructor, \n        которое ссылается на функцию-конструктор/класс которая создала эту функцию.\\n\n        Значение .prototype может быть объектом или null. Другие значения будут проигнорированны.\n        Если присвоить свойству .prototype в качестве значения объект, \n        то этот объект станет прототипом([[Prototype]]), для создаваемого объекта при вызове функции-конструктора/класса через \"new\". \\n \n        А так само по себе, без вызова через new это свойство бесполезно.\n        .__proto__ это свойство объекта. Оно ссылается на .prototype функций-конструктора/класса, с помощью которых был создан этот объект. \\n\n        Так же оно служит для чтения и записи прототипа([[Prototype]]) для этого объекта`,\n  },\n  {\n    id: 26,\n    v: `Что такое ООП? \\n\n        Какие три принципа ООП? (П.С.: инкапсуляция, наследование, полиморфизм) `,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 27,\n    v: `Что такое ссылочный тип данных? В чем отличие от примитивов? \\n`,\n    c: ``,\n    o: `Переменной присваивается объект, то она хранит не объект, а ссылку на него.\n        Отлличие от примитивов в том что примитивы присваиваются и копируются по значению.`,\n  },\n  {\n    id: 28,\n    v: `Расскажите синтаксис функций и функциональных выражений? В чем разница? \\n\n        Что такое именованные функциональные выражения и где доступно имя этого функционального выражения?`,\n    c: ``,\n    o: `function Sum(){} - функция. let Sum = (){} - функциональное выражение. \\n\n        Разница в том что функцию можно вызвать из любого места в коде, а функциональное выражение\n        только после присваивания.`,\n  },\n  {\n    id: 29,\n    v: `Какие перебирающие методы массивов вы знаете? Какой у них синтаксис и для чего они нужны?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 30,\n    v: `Как копируются объекты? Как склонировать объект? Как сравниваются объекты?`,\n    c: ``,\n    o: `Копируются объекты по ссылке и копия ссылается на сам объект. \\n\n        Склонировать можно через for(__in__) & Object.assign(эсайн) & через оператор spred. \n        Если нужно глубокое клонирование, то нужно сделать проверку, \n        является ли св-во объектом, и если да, то его тоже перебрать и склонировать. \\n\n        Объекты будут равны только в том случае, если переменные ссылаются на один и тот же объект.\n        Во всех остальных случаях объекты не равны, даже если они одинаковы.`,\n  },\n  {\n    id: 31,\n    v: `Что такое instanceof? И как работает?`,\n    c: ``,\n    o: `instanceof проверяет пренадлежит ли объект к определённому классу. \\n\n        Он ищет в цепочке протипов объекта этот класс.`,\n  },\n];\n\nexport default vv;\n\n// Здесь пройдись\n/*https://medium.com/@allaev/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%BA-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E-%D1%84%D1%80%D0%BE%D0%BD%D1%82%D0%B5%D0%BD%D0%B4-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%B0-%D0%BD%D0%B0-javascript-9058a75710a*/\n/**https://proglib.io/p/9-js-questions/ */\n/**https://habr.com/ru/company/ruvds/blog/346022/ */\n","let vv = [\n  {\n    id: 1,\n    v: `Какие типы данных существуют в стандарте ECMAScript?`,\n    o: `Number, String, Boolean, Object, null, andefined, Simbol`,\n  },\n  {\n    id: 2,\n    v: `Что получится если сложить строку с числом`,\n    c: `\"1\" + 2; \\n 1+\"2\"; \\n 2+2+\"2\";`,\n    o: `В первых двух случаях произойдёт конкотинация строк и выведет строку \"12\", \\n в третьем сначала сложение чисел 2+2 = 4... \\n а затем конкатинация 4 + \"2\" = \"42\"`,\n  },\n  {\n    id: 3,\n    v: `Что выведет console.log(typeof null)?`,\n    c: ``,\n    o: `object (это внутреняя ошибка языка)`,\n  },\n  {\n    id: 4,\n    v: `Чем отличается var от const и let? Можно ли добавить в const еще одно значение? `,\n    c: ``,\n    o: `Видимость const... и let... ограничена блоком кода {}, они доступны только в нутри блока, а var... видна в не блока. \\n\n        Так же const и let не существуют до присвоения и в консоли при выводе будет ошибка, а var... существует и ровна andefined. \\n\n        Переменные const... и let... могут объявляться только 1 раз, в противном случе будет ошибка. \\n\n        Если const... объект или массив, то можно. А так нет, по ому что это константа.`,\n  },\n  {\n    id: 5,\n    v: `Чем кроме всплытия var отличается от let (типизация данных)? Что будет в консоли и почему?`,\n    c: `let a = 123 \\n function a(){} \\n console.log(a)`,\n    o: `Во второй строке при создании функции создаётся переменная-ссылка на функцию с именем а. \\n В первой строке переменная с таким именем уже создана через let, по этому в консоли будет ошибка \"переменная а уже объявлена\".`,\n  },\n  {\n    id: 6,\n    v: `Какой выполниться раньше, почему?`,\n    c: `setTimeout(()=>{console.log(\"1\")}); \\n\n        setTimeout(()=>{console.log(\"2\")}); `,\n    o: `Раньше выполнится первый. По тому что интерпритатор добавил в очередь\n        сначала его, а потом второй `,\n  },\n  {\n    id: 7,\n    v: `Какие есть способы запроса на сервер?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 8,\n    v: `Что такое JSON ? Какие методы для работы с JSON  вы знаете?`,\n    c: ``,\n    o: `Это текстовый формат обмена данными. С сервера приходит ответ в формате json. \\n\n        JSON.stringify для преобразования объектов в JSON \\n\n        JSON.parse для преобразования JSON обратно в объект \\n\n        Так же в fatch запрсе есть response.json() и response.text()`,\n  },\n  {\n    id: 9,\n    v: `Что делают операторы =,==,=== ? В чем разница?`,\n    c: ``,\n    o: `= это присваивание \\n\n        == это не строгое сравнение, он преобразует операнды разных типов к числу. \n        Возвращает значение логического типа.\\n\n        === это строгое сравнение. Возвращает значение логического типа.\n        Операнды разных типов проверку не пройдут. Он вернёт false.\n          `,\n  },\n  {\n    id: 10,\n    v: `Какие специальные значения для чисел существуют?\n        Как эти специальные значения ведут себя в математических операциях?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 11,\n    v: `Что делает event.stopPropagation()?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 12,\n    v: `Как проверить есть ли в строке какое-нибудь слово \\n\n        (это выражение нужно будет использовать внутри if(...) )?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 13,\n    v: `Как явно преобразовать переменную к строке? \\n\n        Когда происходит неявное преобразование к строке?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 14,\n    v: `Как вывести 3й символ в строке? Можем ли мы заменить этот символ? Как?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 15,\n    v: `Как преобразовать строку в массив символов?`,\n    c: ``,\n    o: `str.split('') Передав в аргументы пустую строку`,\n  },\n  {\n    id: 16,\n    v: `Как округлить число до целого? Как округлить число до 3 знака после запятой? \\n\n        Как округлить до ближайшего целочисленного вверх и вниз ?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 17,\n    v: `Расскажите про синтаксис различных видов цикла. \\n\n        Как досрочно выйти из цикла? \\n \n        Как перейти к следующей итерации?`,\n    c: ``,\n    o: `Есть (do while / while / for) они имеют какое то условие преобразуют его в логическое значение, \n        и до тех пор пока условие верно, тело цикла будет быполняться. \\n\n        do{}wail(_) - сначала выполнит итерацию, а затем проверит условие \n        и пока условие будет true, цикл будет выполнятся.\n        while(_) - сначала проверит условие и затем выполнит итерацию. \\n\n        for(_;_;_) - в скобках принимает начальное значение, проверку, и шаг. До тех пор пока проверка\n        истина, цикл будет выполнятся. \\n\n        for(_in_) && for(_of_) - перебирает все перечисляемые свойства объекта. \n        И для каждого свойства выполняет указаные операции. Их отличие в том что \n        (for in) проходит по ключам, а (for of) по значениям.\n        Прервать цикл можно с помощью break. \n        А перейти к следёющей итерации с помощью continue`,\n  },\n  {\n    id: 18,\n    v: `Что такое унарный,бинарный,тернарный операторы?`,\n    c: ``,\n    o: `Унарный применяется к 1 операнду. \\n\n        Бинарный применяется к 2 операндам. \\n\n        Тернарный это (?) возвращает 2 или 3 операнд, \n        в зависимости от логического значения 1 операнда.\n        Если значение true - 2, folse - 3`,\n  },\n  {\n    id: 19,\n    v: `Расскажите про синтаксис условных операторов.`,\n    c: ``,\n    o: `Оператор if() - в скобках выполняет условие, если оно true, \n        то выполнится код который далее в фигурных скобках.\n        Если оно false, и имеется else, то выполнится блок else.\n        Есле else нет, то ни чего не выполнится. \\n\n        Оператор switch - заменяет несколько условий if(). \n        Имеет один или несколько блоков case и необязательный блок default\n        Строго сравнивает значение с вариантами case, если соответствие найдено, \n        то case начинает выполнятся от найденного соответсвия до ближайшего brake. \n        Или до конца switch если отсутствует brake. \n        Кейсы можно групировать.\n        Если ни один case не совпал – выполняется (если есть) вариант default \\n\n        Оператор ?.`,\n  },\n  {\n    id: 20,\n    v: `Что такое undefined? Что такое null? \n        Как эти типы ведут себя при преобразованию к другим типам \n        и при сравнении с другими типами ?`,\n    c: ``,\n    o: `undefined - значение не присвоено. Приобразуясь к числу оно становится NaN.\n        null это отсутсвие значения, это ни чего. Приобразуясь к числу оно становится 0.\n        Эти значения равны друг другу и не равны никаким другим значениям.`,\n  },\n  {\n    id: 21,\n    v: `Как предотвратить стандартное поведение браузера для какого-нибудь события?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 22,\n    v: `ррррррр`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 23,\n    v: `Как создать новую дату? А как создать ее сразу в миллисекундах?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 24,\n    v: `Как из массива слов получить строку из слов, разделенных запятыми?`,\n    c: ``,\n    o: `arr.join(',')`,\n  },\n  {\n    id: 25,\n    v: `Расскажите про parseInt,parseFloat? Для чего они нужны и как работают?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 26,\n    v: `Какие математические операции вы знаете? Что такое Math?`,\n    c: ``,\n    o: ``,\n  },\n  {\n    id: 26,\n    v: `Что такое переменная? Функция? Оператор?`,\n    c: ``,\n    o: `Переменная это именованая ячейка памяти. \\n\n        Функция это блок кода, выполняющий какую то операцию. \\n\n        Оператор это символ или группа символов, выполняющие какие то операции. \n        На пример: сравнение, мат.операции, присваивание, преобразование к логическому типу данных...`,\n  },\n];\n\nexport default vv;\n","import React, { Component } from \"react\";\nimport vvObj from \"./vv/vvObj\";\nimport vvAll from \"./vv/vvAll\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vvAll: false,\n      vvObj: false,\n      otvet: false,\n      vvSort: vvObj.sort(() => Math.random() - 0.5),\n      index: 0,\n      // num: vv.length,\n      finish: false,\n    };\n    this.Otvet = this.Otvet.bind(this);\n    this.Next = this.Next.bind(this);\n  }\n  // componentDidMount() {\n  //   const { vvAll, vvObj } = this.state;\n  //   vvAll && this.setState({ vvSort: vvAll.sort(() => Math.random() - 0.5) });\n  //   vvObj && this.setState({ vvSort: vvObj.sort(() => Math.random() - 0.5) });\n  // }\n  All() {\n    this.setState({ vvSort: vvAll.sort(() => Math.random() - 0.5) });\n  }\n  Obj() {\n    this.setState({ vvSort: vvObj.sort(() => Math.random() - 0.5) });\n  }\n  Text(str) {\n    return str.split(\"\\n\").map((item, index) => {\n      return item ? (\n        <span key={index}>\n          {item}\n          <br />\n        </span>\n      ) : null;\n    });\n  }\n\n  Otvet() {\n    this.setState({ otvet: true });\n  }\n\n  Next() {\n    let { vvSort, index, num } = this.state;\n    // console.log(vvSort.length, index);\n    return index > vvSort.length - 2\n      ? this.setState({ finish: true })\n      : this.setState({ index: index + 1, otvet: false });\n  }\n\n  render() {\n    const { vvSort, index, otvet, finish } = this.state;\n    console.log(vvSort);\n    return (\n      <div className=\"App\">\n        <content className=\"content\">\n          <div className=\"but\">\n            <button onClick={this.All.bind(this)}>vvAll</button>\n            <button onClick={this.Obj.bind(this)}>vvObj</button>\n          </div>\n          {finish ? (\n            <p className=\"finish\">ВСЁ !!!</p>\n          ) : (\n            <div className=\"test\">\n              <div className=\"v\">\n                <button onClick={this.Next}>ВОПРОС</button>\n                {vvSort.length ? (\n                  <>\n                    <p className=\"text\">{this.Text(vvSort[index].v)}</p>\n                    {vvSort[index].c ? (\n                      <div className=\"code\">{this.Text(vvSort[index].c)}</div>\n                    ) : null}\n                  </>\n                ) : (\n                  <p>Ни чего нету :( </p>\n                )}\n              </div>\n              <div className=\"o\">\n                <button onClick={this.Otvet}>ОТВЕТ</button>\n                {otvet && <p className=\"text\">{this.Text(vvSort[index].o)}</p>}\n              </div>\n            </div>\n          )}\n          <div className=\"info\">\n            <p>{`Вопрос № ${index + 1}`}</p>\n            <p>{`Всего: ${vvSort.length}`}</p>\n            <p>{`ID: ${vvSort[index].id}`}</p>\n          </div>\n        </content>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}